---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";
import { render } from "astro:content";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.id },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content } = await render(post);
---

<style is:global>
  img {
    cursor: pointer;
    height: 55vh;
    object-fit: contain;
  }

  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.8);
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .modal.open {
    display: flex;
  }

  .modal img {
    max-width: 90vw;
    max-height: 90vh;
    transition: transform 0.3s ease;
    transform-origin: center center;
    cursor: grab;
  }

  .modal img:active {
    cursor: grabbing;
  }

  .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    font-size: 2rem;
    color: white;
    cursor: pointer;
  }
</style>

<BlogPost {...post.data}>
  <Content />

  <!-- Modal con zoom -->
  <div id="image-modal" class="modal">
    <span id="modal-close" class="modal-close">&times;</span>
    <img id="modal-img" src="" alt="Imagen ampliada" />
  </div>

  <script is:inline>
    const modal = document.getElementById("image-modal");
    const modalImg = document.getElementById("modal-img");
    const modalClose = document.getElementById("modal-close");

    let scale = 1;
    let originX = 0;
    let originY = 0;
    let isDragging = false;
    let startX, startY, lastX = 0, lastY = 0;

    document.addEventListener("click", (e) => {
      const target = e.target;
      if (target.tagName === "IMG" && target.closest("article")) {
        modalImg.src = target.src;
        modal.classList.add("open");
        scale = 1;
        lastX = lastY = 0;
        modalImg.style.transform = `scale(${scale}) translate(0px, 0px)`;
      }
    });

    modalClose.addEventListener("click", closeModal);
    modal.addEventListener("click", (e) => {
      if (e.target === modal) closeModal();
    });

    function closeModal() {
      modal.classList.remove("open");
      modalImg.src = "";
      modalImg.style.transform = "";
    }

    modalImg.addEventListener("wheel", (e) => {
      e.preventDefault();
      const delta = Math.sign(e.deltaY) * -0.1;
      scale = Math.min(Math.max(1, scale + delta), 5);
      modalImg.style.transform = `scale(${scale}) translate(${lastX}px, ${lastY}px)`;
    });

    modalImg.addEventListener("mousedown", (e) => {
      isDragging = true;
      startX = e.clientX;
      startY = e.clientY;
      modalImg.style.cursor = "grabbing";
    });

    document.addEventListener("mousemove", (e) => {
      if (!isDragging) return;
      const dx = e.clientX - startX;
      const dy = e.clientY - startY;
      lastX += dx;
      lastY += dy;
      modalImg.style.transform = `scale(${scale}) translate(${lastX}px, ${lastY}px)`;
      startX = e.clientX;
      startY = e.clientY;
    });

    document.addEventListener("mouseup", () => {
      isDragging = false;
      modalImg.style.cursor = "grab";
    });
  </script>
</BlogPost>
